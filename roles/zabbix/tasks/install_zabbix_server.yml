- name: download ZABBIX Repo - Centos/RHEL 7
  get_url:
    url: http://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm
    dest: /tmp/zabbix.rpm
  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"

- name: install ZABBIX Repo - Centos/RHEL 7
  yum:
    name: /tmp/zabbix.rpm
    state: present
  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"

- name: get {{ zabbixRpmGpgKey }}
  get_url:
    url: "{{ zabbixRpmGpgKey }}"
    dest: /tmp/RPM-GPG-KEY-ZABBIX
  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"

- name: import a key from a file
  rpm_key:
    state: present
    key: /tmp/RPM-GPG-KEY-ZABBIX

- name: install zabbix-server
  yum:
    name: "{{ item }}"
    enablerepo: zabbix
    state: latest
    disable_gpg_check: no
  with_items:
    - zabbix-get
    - zabbix-server-mysql
    - zabbix-web-mysql
    - zabbix-web-japanese
    - zabbix-proxy-mysql

- name: disabled zabbix repository
  lineinfile:
    path: /etc/yum.repos.d/zabbix.repo
    regexp: '^enabled'
    line: "enabled=0"

- name: create a new database
  mysql_db:
    name: "{{ DBName }}"
    state: present
    encoding: utf8
    collation: utf8_bin

- name: create database user and 'WITH GRANT OPTION'
  mysql_user:
    name: "{{ DBUser }}"
    password: "{{ DBPassword }}"
    priv: "{{ DBName }}.*:ALL,GRANT"
    state: present

- name: check to exist zabbix table
  shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select count(*) from users;"
  ignore_errors: yes
  register: count_users
#- debug: var=count_users

- name: insert zabbix DB
  shell: zcat /usr/share/doc/zabbix-server-mysql-*/create.sql.gz | mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }}
  when: count_users.rc != 0

- name: setting zabbix_server.conf
  lineinfile:
    path: '{{ FilePath_zabbixServerConf }}'
    regexp: '{{ item.regexp }}'
    insertafter: '{{ item.insertafter }}'
    line: '{{ item.line }}'
  with_items:
    - regexp: '^ListenPort='
      insertafter: "^# ListenPort="
      line: 'ListenPort={{ ListenPort }}'
    - regexp: '^LogFile='
      insertafter: "^# LogFile="
      line: 'LogFile={{ LogFile }}'
    - regexp: '^DBHost='
      insertafter: "^# DBHost="
      line: 'DBHost={{ DBHost }}'
    - regexp: '^DBName='
      insertafter: "^# DBName="
      line: 'DBName={{ DBName }}'
    - regexp: '^DBUser='
      insertafter: "^# DBUser="
      line: 'DBUser={{ DBUser }}'
    - regexp: '^DBPassword='
      insertafter: "^# DBPassword="
      line: 'DBPassword={{ DBPassword }}'
    - regexp: '^DBPort='
      insertafter: "^# DBPort="
      line: 'DBPort={{ DBPort }}'
    - regexp: '^DBSocket='
      insertafter: "^# DBSocket="
      line: 'DBSocket={{ DBSocket }}'
  notify: restart zabbix-server

- name: setting zabbix.conf.php for web
  template:
    src: zabbix.conf.php.j2
    dest: '{{ FilePath_zabbixPHPConf }}'
    owner: apache
    group: apache
    mode: 0644

- name: create a shell file for alerting into Slack
  template:
    src: slack.sh.j2
    dest: '{{ FilePath_alertScriptForSlack }}'
    mode: 0655

- name: add port(10051) for zabbix-server
  firewalld:
    port: 10051/tcp
    permanent: true
    state: enabled
  notify: reload firewalld

- name: start zabbix-server
  service:
    name: zabbix-server
    state: started
    enabled: yes
  notify: restart httpd

- name: start zabbix-proxy
  service:
    name: zabbix-proxy
    state: started
    enabled: yes

- name: get sessionID for authorizing Zabbix API
  shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select sessionid from sessions where status = 0 limit 1;"
  ignore_errors: yes
  register: sessionID
#- debug: var=sessionID

- name: create media types
  shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select count(*) from media_type where description = 'Slack';"
  ignore_errors: yes
  register: cntMediaType_Slack
#- debug: var=mediaTypeName
- uri:
    url: http://localhost/zabbix/api_jsonrpc.php
    method: POST
    body: '
      {
        "jsonrpc": "2.0",
        "method": "mediatype.create",
        "params":
        {
          "description": "Slack",
          "type": 1,
          "exec_path": "slack.sh",
          "status":"0",
          "exec_params":"{ALERT.SENDTO}\n{ALERT.SUBJECT}\n{ALERT.MESSAGE}\n"
        },
      "auth": "{{ sessionID.stdout_lines[1] }}",
      "id": 1
      }'
    body_format: json
    HEADER_Content-Type: "application/json-rpc"
  when: cntMediaType_Slack.stdout_lines[1] == "0"

- name: add Media to Users(Admin)
  shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select mediatypeid from media_type where description = 'Slack';"
  ignore_errors: yes
  register: mediatypeID
#- debug: var=mediatypeID
- shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select count(*) from media where mediatypeid = '{{ mediatypeID.stdout_lines[1] }}';"
  ignore_errors: yes
  register: cntMediatype
#- debug: var=cntMediatype
- uri:
    url: http://localhost/zabbix/api_jsonrpc.php
    method: POST
    body: '
      {
        "jsonrpc": "2.0",
        "method": "user.addmedia",
        "params":
        {
          "users": {"userid": "1"},
          "medias":
          {
            "mediatypeid": "{{ mediatypeID.stdout_lines[1] }}",
            "sendto": "#zabbix",
            "active": 0,
            "severity": 63,
            "period": "1-7,00:00-24:00"
          }
        },
      "auth": "{{ sessionID.stdout_lines[1] }}",
      "id": 1
      }'
    body_format: json
    HEADER_Content-Type: "application/json-rpc"
  when: cntMediatype.stdout_lines[1] == "0"

- name: add Actions for Trigger (Send message to Admin)
  shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select count(*) from actions where name = 'Trigger action';"
  ignore_errors: yes
  register: actionName
#- debug: var=actionName
- uri:
    url: http://localhost/zabbix/api_jsonrpc.php
    method: POST
    body: '
      {
        "jsonrpc": "2.0",
        "method": "action.create",
        "params": {
          "name": "Trigger action",
          "eventsource": "0",
          "status": "0",
          "esc_period": "3600",
          "def_shortdata": "{TRIGGER.STATUS}: {TRIGGER.NAME}",
          "filter": {
            "evaltype": "0",
            "conditions": [
              {
                "conditiontype": "5",
                "operator": "0",
                "value": "1",
                "formulaid": "A"
              },
              {
                "conditiontype": "5",
                "operator": "0",
                "value": "0",
                "formulaid": "B"
              }
            ]
          },
          "recovery_msg": "1",
          "r_shortdata": "{TRIGGER.STATUS}: {TRIGGER.NAME}",
          "operations": [
            {
              "operationtype": "0",
              "esc_period": "0",
              "esc_step_from": "1",
              "esc_step_to": "1",
              "evaltype": "0",
              "opmessage": {
                "default_msg": "1",
                "mediatypeid": "0"
              },
              "opmessage_usr": [
                {
                  "userid": "1"
                }
              ]
            }
          ]
        },
      "auth": "{{ sessionID.stdout_lines[1] }}",
      "id": 1
      }'
    body_format: json
    HEADER_Content-Type: "application/json-rpc"
  when: actionName.stdout_lines[1] == "0"

- name: create hosts
  shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select groupid from groups where name = 'Linux servers';"
  ignore_errors: yes
  register: gpidForLinux
# - debug: var=gpidForLinux
#- shell: mysql -u{{ DBUser }} -p{{ DBPassword }} {{ DBName }} -e "select host from hosts;"
#  ignore_errors: yes
#  register: existHosts
#- debug: var=existHosts
- uri:
    url: http://localhost/zabbix/api_jsonrpc.php
    method: POST
    body: '
      {
        "jsonrpc": "2.0",
        "method": "host.create",
        "params": {
          "host": "{{ item }}",
          "interfaces": [
            {
              "type": 1,
              "main": 1,
              "useip": 0,
              "ip": "",
              "dns": "{{ item }}",
              "port": "10050"
            }
          ],
          "groups": [
            {
              "groupid": "{{ gpidForLinux.stdout_lines[1] }}"
            }
          ],
          "templates": [
            {
              "templateid": "10001"
            }
          ]
        },
        "auth": "{{ sessionID.stdout_lines[1] }}",
        "id": 1
      }'
    body_format: json
    HEADER_Content-Type: "application/json-rpc"
  with_items:
    - zabbix
    - zabbix-sub
    - zabbix-sub2
